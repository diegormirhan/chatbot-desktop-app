{"version":3,"file":"index.js","mappings":";;;;;;;;;AAAA,QAAQ,UAAU,EAAE,mBAAO,CAAC,0BAAU;AACtC,eAAe,mBAAO,CAAC,qIAAQ;AAC/B,aAAa,mBAAO,CAAC,kBAAM;AAC3B,eAAe,mBAAO,CAAC,qIAAQ;AAC/B,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB;;;;;;;;;;AChCnB,WAAW,mBAAO,CAAC,cAAI;AACvB,aAAa,mBAAO,CAAC,kBAAM;AAC3B,gBAAgB,mBAAO,CAAC,sIAAS;AACjC,eAAe,mBAAO,CAAC,qIAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB;;;;;;;;;;;;AC5BnB;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,QAAQ,8BAA8B,EAAE,mBAAO,CAAC,0BAAU;AAC1D,QAAQ,sBAAsB,EAAE,mBAAO,CAAC,oCAAa;AACrD,QAAQ,eAAe,EAAE,mBAAO,CAAC,gDAAmB;AACpD,aAAa,mBAAO,CAAC,kBAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD","sources":["webpack://chatbot-desktop-app/./src/openai.js","webpack://chatbot-desktop-app/./src/updateApiKey.js","webpack://chatbot-desktop-app/external node-commonjs \"electron\"","webpack://chatbot-desktop-app/external node-commonjs \"fs\"","webpack://chatbot-desktop-app/external node-commonjs \"path\"","webpack://chatbot-desktop-app/webpack/bootstrap","webpack://chatbot-desktop-app/./src/main.js"],"sourcesContent":["const { ipcMain } = require('electron')\r\nconst OpenAI = require('openai')\r\nconst path = require('path');\r\nconst dotenv = require('dotenv');\r\ndotenv.config({ path: path.join(__dirname, '.env') });\r\n\r\nconst setupChatGptHandler = () => {\r\n    const openai = new OpenAI({\r\n        apiKey: process.env.OPENAI_API_KEY,\r\n    });\r\n\r\n    ipcMain.removeHandler('call-chatgpt-api');\r\n\r\n    ipcMain.handle('call-chatgpt-api', async (event, prompt) => {\r\n        try {\r\n            const response = await openai.chat.completions.create({\r\n                model: 'gpt-3.5-turbo',\r\n                messages: [{\r\n                    role: 'user',\r\n                    content: prompt\r\n                }],\r\n                temperature: 0.7,\r\n            })\r\n\r\n\r\n            return response.choices[0].message.content\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = { setupChatGptHandler }","const fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst express = require(\"express\");\r\nconst dotenv = require(\"dotenv\")\r\n\r\nfunction updateApiKey() {\r\n  const app = express();\r\n  app.use(express.json());\r\n\r\n  app.listen(2000, () => {\r\n    console.log(\"--> API KEY UPDATE SERVER RUNNING ON PORT 3000\");\r\n  });\r\n\r\n  app.post(\"/update-api\", (req, res) => {\r\n    const apiKey = req.body.apiKey;\r\n    const envPath = path.join(__dirname, '..', '.env');\r\n    let envContent = fs.readFileSync(envPath, \"utf-8\");\r\n    envContent = envContent.replace(\r\n      /OPENAI_API_KEY=.*/,\r\n      `OPENAI_API_KEY=${apiKey}`\r\n    );\r\n    fs.writeFileSync(envPath, envContent, \"utf-8\");\r\n    dotenv.config({ path: envPath });\r\n    res.send(\"API KEY UPDATED\");\r\n    console.log(\"--> API KEY UPDATED\");\r\n  });\r\n}\r\n\r\nmodule.exports = { updateApiKey };\r\n","module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { app, BrowserWindow, ipcMain } = require('electron')\r\nconst { setupChatGptHandler } = require('./openai.js')\r\nconst { updateApiKey } = require('./updateApiKey.js')\r\nconst path = require('path')\r\n\r\nconst createWindow = () => {\r\n    const win = new BrowserWindow({\r\n        width: 1280,\r\n        height: 720,\r\n        center: true,\r\n        minWidth: 800,\r\n        minHeight: 600,\r\n        title: 'ChatBot App',\r\n        frame: false,\r\n        webPreferences: {\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n            devTools: true,\r\n        }\r\n    })\r\n    win.loadFile('./renderer/index.html')\r\n\r\n    ipcMain.on('closeWindow', () => {\r\n        win.close();\r\n    })\r\n\r\n    ipcMain.on('minimizeWindow', () => {\r\n        win.minimize();\r\n    })\r\n\r\n    ipcMain.on(\"maximizeWindow\", () => {\r\n        if (win.isMaximized()) {\r\n            win.restore();\r\n        } else {\r\n            win.maximize();\r\n        }\r\n    })\r\n}\r\n\r\napp.on('window-all-closed', () => {\r\n    if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\napp.whenReady().then(() => {\r\n    createWindow()\r\n    setupChatGptHandler()\r\n    updateApiKey()\r\n})\r\n\r\n"],"names":[],"sourceRoot":""}